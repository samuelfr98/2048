{"version":3,"sources":["game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","dimensions","this","gameState","Array","fill","moveListeners","winListeners","loseListeners","same","setupNewGame","board","score","won","over","makeTwoNewTiles","direction","beforeMove","didMerge","leftArrays","makeRowArrays","filteredLeft","i","push","filter","tile","undefined","j","length","forEach","row","flat","rightArrays","filteredRight","unshift","upArrays","makeColArrays","filteredUp","col","flattenCols","downArrays","filteredDown","afterMove","makeNewTile","zeroes","checkBoardForMoves","canMove","rows","console","table","callback","chance","index","Math","floor","random","cols","map","colArr","output","counter","instructions","className","gameOver","boardGame","gameWon","clicked","window","location","reload","b","number","App","useState","setBoardGame","useEffect","handleKeyDown","e","temp","loadGame","getGameState","keyCode","preventDefault","move","p","document","addEventListener","removeEventListener","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f954360b.chunk.js","sourcesContent":["/*\nAdd your code for Game here\n */\n\nexport default class Game {\n    constructor(dimensions) {\n        this.gameState = {\n            'board': new Array(dimensions * dimensions).fill(0),\n            'score': 0,\n            'won': false,\n            'over': false\n        };\n\n        this.dimensions = dimensions;\n        this.moveListeners = [];\n        this.winListeners = [];\n        this.loseListeners = [];\n        this.same = false;\n\n        this.setupNewGame();\n    };\n\n    setupNewGame() {\n        // runs after game is over\n        this.gameState.board = new Array(this.dimensions * this.dimensions).fill(0);\n        this.gameState.score = 0;\n        this.gameState.won = false;\n        this.gameState.over = false;\n        // fill 2 random, empty tiles with either a 2 (90% chance) or a 4 (10% chance)\n        this.makeTwoNewTiles();\n        return;\n    };\n\n    loadGame(gameState) {\n        // setGameState\n        this.gameState.board = gameState.board;\n        this.gameState.score = gameState.score;\n        this.gameState.won = gameState.won;\n        this.gameState.over = gameState.over;\n        return;\n    };\n\n    move(direction) {\n        // add new space after legal move\n        let beforeMove = this.gameState.board\n\n        let didMerge = false;\n\n        if (direction === 'left') {\n            // make 4 arrays, one for each row in game board\n            let leftArrays = this.makeRowArrays();\n            // filter out zeroes from each array\n            let filteredLeft = [];\n            for (let i = 0; i < this.dimensions; i++) {\n                filteredLeft.push(leftArrays[i].filter(tile => tile !== 0 && tile !== undefined));\n            }\n            // combine any pairs of identical, adjacent tiles starting from the left, replace one tile with 0,  and filter out for zeroes again\n            while (!didMerge) {\n                for (let i = 0; i < this.dimensions; i++) {\n                    for (let j = 0; j < filteredLeft[i].length - 1; j++) {\n                        if (filteredLeft[i][j] === filteredLeft[i][j + 1]) {\n                            filteredLeft[i][j] = filteredLeft[i][j] * 2;\n                            filteredLeft[i][j + 1] = 0;\n                            // update score!\n                            this.gameState.score += filteredLeft[i][j];\n                        }\n                    }\n                    filteredLeft[i] = filteredLeft[i].filter(tile => tile !== 0);\n                }\n                didMerge = true;\n            }\n            // filter out zeroes from each row\n            filteredLeft.forEach(row => row.filter(tile => tile !== 0));\n\n            // add trailing zeroes until array is back to length of this.dimensions\n            for (let i = 0; i < this.dimensions; i++) {\n                for (let j = filteredLeft[i].length; j < this.dimensions; j++) {\n                    filteredLeft[i].push(0);\n                }\n            }\n\n            // flatten out double array and set board to new values\n            this.gameState.board = filteredLeft.flat();\n\n        } else if (direction === 'right') {\n            // make 4 arrays, one for each row in game board\n            let rightArrays = this.makeRowArrays();\n            // filter out zeroes from each array\n            let filteredRight = [];\n            for (let i = 0; i < this.dimensions; i++) {\n                filteredRight.push(rightArrays[i].filter(tile => tile !== 0 && tile !== undefined));\n            }\n            // combine any pairs of identical tiles, replace one tile with 0,  and filter out for zeroes again\n\n            while (!didMerge) {\n                for (let i = 0; i < this.dimensions; i++) {\n                    for (let j = filteredRight[i].length - 1; j > 0; j--) {\n                        if (filteredRight[i][j - 1] === filteredRight[i][j]) {\n                            filteredRight[i][j] = filteredRight[i][j] * 2;\n                            filteredRight[i][j - 1] = 0;\n                            // update score!\n                            this.gameState.score += filteredRight[i][j];\n                        }\n                    }\n                    filteredRight[i] = filteredRight[i].filter(tile => tile !== 0);\n                }\n                didMerge = true;\n                break;\n            }\n            // filter out zeroes from each row\n            filteredRight.forEach(row => row.filter(tile => tile !== 0));\n\n            // add leading zeroes until array is back to length of this.dimensions\n            for (let i = 0; i < this.dimensions; i++) {\n                for (let j = filteredRight[i].length; j < this.dimensions; j++) {\n                    filteredRight[i].unshift(0);\n                }\n            }\n            // flatten out double array and set board to new values\n            this.gameState.board = filteredRight.flat();\n\n        } else if (direction === 'up') {\n            // make 4 arrays, one for each row in game board\n            let upArrays = this.makeColArrays();\n            // filter out zeroes from each array\n            let filteredUp = [];\n            for (let i = 0; i < this.dimensions; i++) {\n                filteredUp.push(upArrays[i].filter(tile => tile !== 0 && tile !== undefined));\n            }\n            // combine any pairs of identical tiles, replace one tile with 0,  and filter out for zeroes again\n            while (!didMerge) {\n                for (let i = 0; i < this.dimensions; i++) {\n                    for (let j = 0; j < filteredUp[i].length - 1; j++) {\n                        if (filteredUp[i][j] === filteredUp[i][j + 1]) {\n                            filteredUp[i][j] = filteredUp[i][j] * 2;\n                            filteredUp[i][j + 1] = 0;\n                            // update score!\n                            this.gameState.score += filteredUp[i][j];\n                        }\n                    }\n                    filteredUp[i] = filteredUp[i].filter(tile => tile !== 0);\n                }\n                didMerge = true;\n                break;\n            }\n\n            // filter out 0s from each col\n            filteredUp.forEach(col => col.filter(tile => tile !== 0));\n\n\n            // add leading zeroes until array is back to length of this.dimensions\n            for (let i = 0; i < this.dimensions; i++) {\n                for (let j = filteredUp[i].length; j < this.dimensions; j++) {\n                    filteredUp[i].push(0);\n                }\n            }\n\n            // flatten out double array and set board to new values\n            this.gameState.board = this.flattenCols(filteredUp);\n\n        } else if (direction === 'down') {\n            // make 4 arrays, one for each row in game board\n            let downArrays = this.makeColArrays();\n            // filter out zeroes from each array\n            let filteredDown = [];\n            for (let i = 0; i < this.dimensions; i++) {\n                filteredDown.push(downArrays[i].filter(tile => tile !== 0 && tile !== undefined));\n            }\n            // combine any pairs of identical tiles, replace one tile with 0,  and filter out for zeroes again\n            while (!didMerge) {\n                for (let i = 0; i < this.dimensions; i++) {\n                    for (let j = filteredDown[i].length - 1; j > 0; j--) {\n                        if (filteredDown[i][j - 1] === filteredDown[i][j]) {\n                            filteredDown[i][j] = filteredDown[i][j] * 2;\n                            filteredDown[i][j - 1] = 0;\n                            // update score!\n                            this.gameState.score += filteredDown[i][j];\n                        }\n                    }\n                    filteredDown[i] = filteredDown[i].filter(tile => tile !== 0);\n                }\n                didMerge = true;\n                break;\n            }\n\n            // filter out 0s from each col\n            filteredDown.forEach(col => col.filter(tile => tile !== 0));\n\n            // add leading zeroes until array is back to length of this.dimensions\n\n            for (let i = 0; i < this.dimensions; i++) {\n                for (let j = filteredDown[i].length; j < this.dimensions; j++) {\n                    filteredDown[i].unshift(0);\n                }\n            }\n\n            // flatten out double array and set board to new values\n            this.gameState.board = this.flattenCols(filteredDown);\n        }\n\n        let afterMove = this.gameState.board;\n\n        // make sure valid move occurred\n        let same = true;\n        for (let i = 0; i < this.dimensions * this.dimensions; i++) {\n            if (beforeMove[i] !== afterMove[i]) same = false;\n        }\n        if (same === false) this.makeNewTile();\n        this.same = same;\n        // call move listeners\n        for (let i = 0; i < this.moveListeners.length; i++) {\n            this.moveListeners[i](this.gameState);\n        }\n\n        // check for a 2048 tile and call all win listeners\n        if (this.gameState.board.filter(tile => tile === 2048).length !== 0 && this.gameState.board.filter(tile => tile === 2048) !== undefined) {\n            this.gameState.won = true;\n        }\n        if (this.gameState.won) {\n            for (let i = 0; i < this.winListeners.length; i++) {\n                this.winListeners[i](this.gameState);\n            }\n        }\n\n        // see if board is stuck and call all lose listeners\n        // FINSISHED HERE 3/26/21\n        let zeroes = this.gameState.board.filter(tile => tile === 0).length;\n        let checkBoardForMoves = this.makeRowArrays();\n\n        let canMove = false;\n        for (let i = 0; i < this.dimensions; i++) {\n            for (let j = 0; j < this.dimensions - 1; j++) {\n                if (checkBoardForMoves[i][j] === checkBoardForMoves[i][j + 1]) {\n                    canMove = true;\n                    break;\n                }\n            }\n        }\n        for (let i = 0; i < this.dimensions - 1; i++) {\n            for (let j = 0; j < this.dimensions; j++) {\n                if (checkBoardForMoves[i][j] === checkBoardForMoves[i + 1][j]) {\n                    canMove = true;\n                    break;\n                }\n            }\n        }\n\n        if ((zeroes === 0) && !canMove) {\n            this.gameState.over = true;\n        }\n\n        if (this.gameState.over) {\n            for (let i = 0; i < this.loseListeners.length; i++) {\n                this.loseListeners[i](this.gameState);\n            }\n        }\n\n        return;\n    };\n\n    toString() {\n        let rows = this.makeRowArrays();\n        console.table(rows);\n        // return this.gameState.board.map(tile => new Array(1).fill(tile));\n        return;\n    };\n\n    onMove(callback) {\n        // register callback as listener for .move\n        this.moveListeners.push(callback);\n        return;\n    };\n\n    onWin(callback) {\n        // register callback as listener for this.getGameState.won\n        this.winListeners.push(callback);\n        return;\n    };\n\n    onLose(callback) {\n        // register callback as listener for .move\n        this.loseListeners.push(callback);\n        return;\n    };\n\n    getGameState() {\n        return this.gameState;\n    };\n\n\n    // Helper functions start here\n\n    makeNewTile() {\n        let chance = 0;\n        let i = 0;\n        let index = 0;\n\n        while (i < 1) {\n            chance = Math.floor(Math.random() * 100);\n            // random index\n            index = Math.floor(Math.random() * ((this.dimensions * this.dimensions)));\n            if (this.gameState.board[index] === 0) {\n                this.gameState.board[index] = (chance < 90) ? 2 : 4;\n                i++;\n            }\n            else {\n                continue;\n            }\n        }\n        return;\n    };\n\n    makeTwoNewTiles() {\n        let chance = 0;\n        let i = 0;\n        let index = 0;\n\n        while (i < 2) {\n            chance = Math.floor(Math.random() * 100);\n            // random index\n            index = Math.floor(Math.random() * ((this.dimensions * this.dimensions)));\n            if (this.gameState.board[index] === 0) {\n                this.gameState.board[index] = (chance < 90) ? 2 : 4;\n                i++;\n            }\n            else {\n                continue;\n            }\n        }\n        return;\n    };\n\n    makeColArrays() {\n        let cols = new Array(this.dimensions).fill(0).map(() => new Array(this.dimensions).fill(0));\n        // cols = [[0,0,0,0]...]\n        let rows = this.makeRowArrays();\n        // iterates rows\n        for (let i = 0; i < this.dimensions; i++) {\n            // iterates cols\n            for (let j = 0; j < this.dimensions; j++) {\n                cols[i][j] = rows[j][i];\n            }\n        }\n        return cols;\n    };\n\n    flattenCols(colArr) {\n        // let rows = [];\n        // for (let i = 0; i < this.dimensions; i++) {\n        //     rows[i] = [];\n        //     for (let j = 0; j < this.dimensions; j++) {\n        //         rows[i][j] = colArr[j][i]\n        //     }\n        // }\n        // return rows.flat();\n\n        let output = [];\n        let counter = 0;\n        for (let i = 0; i < this.dimensions; i++) {\n            for (let j = 0; j < this.dimensions; j++) {\n                output[counter] = colArr[j][i]\n                counter++;\n            }\n        }\n        return output;\n    }\n\n    makeRowArrays() {\n        let rows = new Array(this.dimensions).fill(0).map(() => new Array(this.dimensions).fill(0));\n        let counter = 0;\n        // iterates cols\n        for (let i = 0; i < this.dimensions; i++) {\n            // iterates rows\n            for (let j = 0; j < this.dimensions; j++) {\n                if (!rows[i][j]) rows[i][j] = this.gameState.board[counter];\n                if (rows[i][j] === undefined) rows[i][j] = 0;\n                counter++;\n            }\n        }\n        return rows;\n    };\n};","import './App.css';\nimport Game from './game.js';\n// import $ from \"jquery\";\nimport { useState } from \"react\";\nimport {useEffect} from 'react'\n\nfunction App() {\n\n  // Set up the game\n  const [boardGame, setBoardGame] = useState(new Game(4));\n\n  useEffect(() => {\n    const handleKeyDown = function(e) {\n      let temp = new Game(4);\n      temp.loadGame(boardGame.getGameState());\n\n      let direction = \"\";\n      if (e.keyCode === 37) {\n        e.preventDefault();\n        direction = 'left';\n      } else if (e.keyCode === 38) {\n        e.preventDefault();\n        direction = 'up';\n      } else if (e.keyCode === 39) {\n        e.preventDefault();\n        direction = 'right';\n      } else if (e.keyCode === 40) {\n        e.preventDefault();\n        direction = 'down';\n      }\n\n      if (direction !== \"\") {\n        temp.move(direction);\n      }\n\n      setBoardGame(p => temp);\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener(\"keydown\", handleKeyDown);\n  }, [boardGame]);\n\n\n  return (\n    <div>\n      <div>\n        <div className=\"Instructions\">\n          <b>{instructions}</b>\n          </div>\n        <div className=\"GameProgress\">  \n          <p className =\"\">\n            Game is over? It appears that is: <b className=\"Over\">{gameOver(boardGame)}</b>\n          </p>\n          <p className=\"\">\n            You think you won? It appears that is: <b className=\"Won\">{gameWon(boardGame)}</b>\n          </p>\n        </div>\n        <div className=\"ScoreTile\">\n          <p className=\"Score\">\n            Score: {score(boardGame)}\n          </p>\n        </div>\n        <div className=\"Tile\">\n          <button className=\"Reset\" onClick = {() => clicked()}>\n            Reset\n          </button>\n        </div>\n        <div className=\"Board\" >\n          {board(boardGame.gameState.board)} \n        </div>\n      </div>\n    </div>\n  );\n}\n \n// Instructions\nconst instructions = \n  <div className=\"Instructions\">\n    <p>\n      Join the tiles to get to 2048!\n    </p>\n  </div>;\n\n\n// gameProgess\nconst gameOver = function(boardGame) {\n  if (boardGame.gameState.over) return \"True! You loser!\";\n  if (!boardGame.gameState.over) return \"False! Keep playing!\";\n}\n\nconst gameWon = function(boardGame) {\n  if (boardGame.gameState.won) return \"True! You winner!\";\n  if (!boardGame.gameState.won) return \"False! Not a winner yet!\";\n}\n  \n\n// Score\nconst score = function (boardGame) {\n    return boardGame.gameState.score;\n}\n\nconst clicked = function() {\n  window.location.reload();\n}\n\n// Set up board\nconst board = function(b) {\n  return(\n    b.map((number, i) =>\n      <div key={i} className=\"Tile\"> \n        <div className=\"Value\">\n          {number} \n        </div>\n      </div>\n  )\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n "],"sourceRoot":""}